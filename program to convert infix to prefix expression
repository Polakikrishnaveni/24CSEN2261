def infix_to_prefix(expression):
    stack, output = [], []
    
    for char in expression[::-1]:
        if char.isalnum():
            output.append(char)
        elif char == ')':
            stack.append(char)
        elif char == '(':
            while stack and stack[-1] != ')':
                output.append(stack.pop())
            stack.pop()
        else:
            while stack and precedence(stack[-1]) > precedence(char):
                output.append(stack.pop())
            stack.append(char)
    
    return ''.join(output[::-1])

def precedence(op):
    return 1 if op in ('+', '-') else 2 if op in ('*', '/') else 0

print(infix_to_prefix("A*(B+C)/D"))  # Output: / * A + B C D
